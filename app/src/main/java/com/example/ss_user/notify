   /*    String currentUserType = sharedPreferences.getString("userType", "");
        String currentUsername = sharedPreferences.getString("username", "");
      DatabaseReference StoreRef = FirebaseDatabase.getInstance().getReference("Approved/Store");

        DatabaseReference SilksRef = FirebaseDatabase.getInstance().getReference("Approved/Silks");

        DatabaseReference cafeRef = FirebaseDatabase.getInstance().getReference("Approved/Cafe");

        DatabaseReference rejStoreRef = FirebaseDatabase.getInstance().getReference("Rejected/Store");

        DatabaseReference rejSilksRef = FirebaseDatabase.getInstance().getReference("Rejected/Silks");

        DatabaseReference rejcafeRef = FirebaseDatabase.getInstance().getReference("Rejected/Cafe");


        StoreRef.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                if (!"Store".equals(currentUserType)) return;

                for (DataSnapshot dateSnapshot : dataSnapshot.getChildren()) {
                    String requestDate = dateSnapshot.getKey();

                    for (DataSnapshot userSnapshot : dateSnapshot.getChildren()) {
                        String username = userSnapshot.getKey();

                        if (!username.equals(currentUsername)) continue;

                        Request request = userSnapshot.getValue(Request.class);
                        String message = "Your access to update data for the date: " + requestDate + " has been approved";

                        NotificationHelper.showNotification(
                                MainActivity.this,
                                "Store Request Approved",
                                message
                        );
                    }
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                Log.e("FirebaseError", "Database read failed: " + error.getMessage());
            }
        });
        rejStoreRef.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                if (!"Store".equals(currentUserType)) return;

                for (DataSnapshot dateSnapshot : dataSnapshot.getChildren()) {
                    String requestDate = dateSnapshot.getKey();

                    for (DataSnapshot userSnapshot : dateSnapshot.getChildren()) {
                        String username = userSnapshot.getKey();

                        if (!username.equals(currentUsername)) continue; // Only notify this user

                        Request request = userSnapshot.getValue(Request.class);
                        String message = "Your access to update data for the date: " + requestDate + " has been rejected";

                        NotificationHelper.showNotification(
                                MainActivity.this,
                                "Store Request Rejected",
                                message
                        );
                    }
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                Log.e("FirebaseError", "Database read failed: " + error.getMessage());
            }
        });
        SilksRef.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                if (!"Silks".equals(currentUserType)) return;

                for (DataSnapshot dateSnapshot : dataSnapshot.getChildren()) {
                    String requestDate = dateSnapshot.getKey();

                    for (DataSnapshot userSnapshot : dateSnapshot.getChildren()) {
                        String username = userSnapshot.getKey();

                        if (!username.equals(currentUsername)) continue;

                        Request request = userSnapshot.getValue(Request.class);
                        String message = "Your access to update data for the date: " + requestDate + " has been approved";

                        NotificationHelper.showNotification(
                                MainActivity.this,
                                "Silks Request Approved",
                                message
                        );
                    }
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                Log.e("FirebaseError", "Database read failed: " + error.getMessage());
            }
        });
        rejSilksRef.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                if (!"Silks".equals(currentUserType)) return;

                for (DataSnapshot dateSnapshot : dataSnapshot.getChildren()) {
                    String requestDate = dateSnapshot.getKey();

                    for (DataSnapshot userSnapshot : dateSnapshot.getChildren()) {
                        String username = userSnapshot.getKey();

                        if (!username.equals(currentUsername)) continue; // Only notify this user

                        Request request = userSnapshot.getValue(Request.class);
                        String message = "Your access to update data for the date: " + requestDate + " has been rejected";

                        NotificationHelper.showNotification(
                                MainActivity.this,
                                "Silks Request Rejected",
                                message
                        );
                    }
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                Log.e("FirebaseError", "Database read failed: " + error.getMessage());
            }
        });
        cafeRef.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                if (!"Cafe".equals(currentUserType)) return;

                for (DataSnapshot dateSnapshot : dataSnapshot.getChildren()) {
                    String requestDate = dateSnapshot.getKey();

                    for (DataSnapshot userSnapshot : dateSnapshot.getChildren()) {
                        String username = userSnapshot.getKey();

                        if (!username.equals(currentUsername)) continue;

                        Request request = userSnapshot.getValue(Request.class);
                        String message = "Your access to update data for the date: " + requestDate + " has been approved";

                        NotificationHelper.showNotification(
                                MainActivity.this,
                                "Cafe Request Approved",
                                message
                        );
                    }
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                Log.e("FirebaseError", "Database read failed: " + error.getMessage());
            }
        });
        rejcafeRef.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                if (!"Cafe".equals(currentUserType)) return;

                for (DataSnapshot dateSnapshot : dataSnapshot.getChildren()) {
                    String requestDate = dateSnapshot.getKey();

                    for (DataSnapshot userSnapshot : dateSnapshot.getChildren()) {
                        String username = userSnapshot.getKey();

                        if (!username.equals(currentUsername)) continue; // Only notify this user

                        Request request = userSnapshot.getValue(Request.class);
                        String message = "Your access to update data for the date: " + requestDate + " has been rejected";

                        NotificationHelper.showNotification(
                                MainActivity.this,
                                "Cafe Request Rejected",
                                message
                        );
                    }
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                Log.e("FirebaseError", "Database read failed: " + error.getMessage());
            }
        });*/